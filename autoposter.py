import os
import logging
import random
from datetime import datetime
import pytz
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
import json
import traceback
load_dotenv()
from fastapi import FastAPI

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
CHANNEL_USERNAMES = ["@KinoTochkaUA", "@KinoTochkaFilms"]
TIMEZONE = os.getenv("TIMEZONE", "Europe/Kyiv")

FOOTERS = [
    "üé¨ –£ –Ω–∞—Å –∑–∞–≤–∂–¥–∏ —î —â–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å ‚Äî —Å–ª—ñ–¥–∫—É–π!",
    "‚ú® –ö—ñ–Ω–æ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è ‚Äî –∑–∞–ª–∏—à–∞–π—Å—è –∑ –Ω–∞–º–∏!",
    "üé• –ü—ñ–¥–ø–∏—à–∏—Å—å, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∫–∏!",
    "üçø –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è –∫—ñ–Ω–æ ‚Äî –±—ñ–ª—å—à–µ —Ü—ñ–∫–∞–≤–æ–≥–æ –≤–∂–µ —Å–∫–æ—Ä–æ!",
    "üîé –ó –Ω–∞–º–∏ –∑–Ω–∞–π–¥–µ—à, —â–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å!",
]

# –û–¥–∏–Ω –æ–±'—î–∫—Ç –±–æ—Ç–∞ –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=None))

def get_sheet():
    import base64, json, re, logging
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    raw_b64  = (os.getenv("GOOGLE_SHEETS_CREDENTIALS_B64")  or "").strip()
    raw_json = (os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON") or "").strip()

    def _parse_b64(b64s: str):
        b64s = "".join(b64s.split())  # –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏/–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è
        payload = base64.b64decode(b64s, validate=False).decode("utf-8", errors="strict")
        return json.loads(payload)

    def _looks_like_b64(s: str) -> bool:
        return len(s) > 100 and re.fullmatch(r"[A-Za-z0-9+/=\s]+", s) is not None

    try:
        if raw_b64:
            data = _parse_b64(raw_b64)
        elif raw_json:
            try:
                data = json.loads(raw_json)
            except json.JSONDecodeError:
                if _looks_like_b64(raw_json):
                    data = _parse_b64(raw_json)
                else:
                    logging.error("GOOGLE_SHEETS_CREDENTIALS_JSON –Ω–µ —Å—Ö–æ–∂–∏–π –Ω—ñ –Ω–∞ JSON, –Ω—ñ –Ω–∞ base64 (len=%d)", len(raw_json))
                    raise
        else:
            raise RuntimeError("–ù–µ–º–∞—î GOOGLE_SHEETS_CREDENTIALS_B64 —ñ GOOGLE_SHEETS_CREDENTIALS_JSON")

        email = data.get("client_email", "")
        logging.warning("CREDS OK: client_email=***%s", email[-18:] if email else "missing")
    except Exception:
        logging.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ Google credentials")
        raise

    creds = ServiceAccountCredentials.from_json_keyfile_dict(data, scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SHEET_ID).sheet1



async def send_to_channels(final_text: str, media_url: str | None):
    for channel in CHANNEL_USERNAMES:
        if media_url and media_url.startswith(("BAAC", "BQAC", "CAAC")):
            await bot.send_video(chat_id=channel, video=media_url, caption=final_text)
        elif media_url and media_url.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
            await bot.send_photo(chat_id=channel, photo=media_url, caption=final_text)
        elif media_url and media_url.lower().endswith((".mp4", ".mov", ".mkv")):
            await bot.send_video(chat_id=channel, video=media_url, caption=final_text)
        else:
            await bot.send_message(chat_id=channel, text=final_text)

async def run_once():
    """–û–¥–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è: –∑–Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∏ –Ω–∞ —á–∞—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ó—Ö, –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å."""
    try:
        sheet = get_sheet()
        expected_headers = ["–¢–µ–∫—Å—Ç", "–î–∞—Ç–∞ —ñ —á–∞—Å", "–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", "–ü—Ä—è–º–∏–π –ª—ñ–Ω–∫", "–°—Ç–∞—Ç—É—Å"]
        rows = sheet.get_all_records(expected_headers=expected_headers)

        tz = pytz.timezone(TIMEZONE)
        now = datetime.now(tz)

        for idx, row in enumerate(rows, start=2):  # 2 ‚Äî –±–æ 1-–π —Ä—è–¥–æ–∫ —Ü–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            status = (row.get("–°—Ç–∞—Ç—É—Å") or "").strip()
            dt_str = (row.get("–î–∞—Ç–∞ —ñ —á–∞—Å") or "").strip()
            text = (row.get("–¢–µ–∫—Å—Ç") or "").strip()
            media_url = (row.get("–ü—Ä—è–º–∏–π –ª—ñ–Ω–∫") or "").strip()

            if not status and dt_str and text:
                try:
                    dt = tz.localize(datetime.strptime(dt_str, "%Y-%m-%d %H:%M"))
                except ValueError:
                    logging.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ —É —Ä—è–¥–∫—É {idx}: {dt_str}")
                    continue

                if dt <= now:
                    footer = random.choice(FOOTERS)
                    final_text = f"{text}\n\n{footer}"
                    await send_to_channels(final_text, media_url)
                    sheet.update_cell(idx, 5, "‚úÖ")  # –∫–æ–ª.5 = "–°—Ç–∞—Ç—É—Å"
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ run_once: {e}")

# –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –æ–¥–Ω—ñ—î—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞ Render)
if __name__ == "__main__":
    import asyncio
    asyncio.run(run_once())
