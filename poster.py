import os
import logging
import random
from datetime import datetime
import pytz
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
import json
import traceback

load_dotenv()
# ‚úÖ —Ä–∞–∑–æ–≤–∏–π –ª–æ–≥-—á–µ–∫ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–ø–æ–±–∞—á–∏—à —É Render logs)
logging.warning(
    "ENV CHECK: B64=%d, JSON=%d, SHEET_ID=%s, BOT=%s",
    len((os.getenv("GOOGLE_SHEETS_CREDENTIALS_B64") or "").strip()),
    len((os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON") or "").strip()),
    ((os.getenv("SHEET_ID") or "")[:6] + "...") if os.getenv("SHEET_ID") else "MISSING",
    ("OK" if os.getenv("BOT_TOKEN") else "MISSING"),
)


# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
CHANNEL_USERNAMES = ["@KinoTochkaUA", "@KinoTochkaFilms"]
TIMEZONE = os.getenv("TIMEZONE", "Europe/Kyiv")

FOOTERS = [
    "üé¨ –£ –Ω–∞—Å –∑–∞–≤–∂–¥–∏ —î —â–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å ‚Äî —Å–ª—ñ–¥–∫—É–π!",
    "‚ú® –ö—ñ–Ω–æ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è ‚Äî –∑–∞–ª–∏—à–∞–π—Å—è –∑ –Ω–∞–º–∏!",
    "üé• –ü—ñ–¥–ø–∏—à–∏—Å—å, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∫–∏!",
    "üçø –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è –∫—ñ–Ω–æ ‚Äî –±—ñ–ª—å—à–µ —Ü—ñ–∫–∞–≤–æ–≥–æ –≤–∂–µ —Å–∫–æ—Ä–æ!",
    "üîé –ó –Ω–∞–º–∏ –∑–Ω–∞–π–¥–µ—à, —â–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å!",
]

# –û–¥–∏–Ω –æ–±'—î–∫—Ç –±–æ—Ç–∞ –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=None))

def get_sheet():
    import base64, json

    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]

    raw_b64 = (os.getenv("GOOGLE_SHEETS_CREDENTIALS_B64") or "").strip()
    if not raw_b64:
        raise RuntimeError("GOOGLE_SHEETS_CREDENTIALS_B64 is empty or not set")

    try:
        b64 = "".join(raw_b64.split())  # –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è/–ø—Ä–æ–±—ñ–ª–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
        payload = base64.b64decode(b64).decode("utf-8")
        data = json.loads(payload)
    except Exception:
        logging.exception("Failed to decode/parse GOOGLE_SHEETS_CREDENTIALS_B64")
        raise

    email = data.get("client_email", "")
    logging.warning("CREDS OK: client_email=***%s", email[-18:] if email else "missing")

    creds = ServiceAccountCredentials.from_json_keyfile_dict(data, scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SHEET_ID).sheet1



async def send_to_channels(final_text: str, media_url: str | None):
    for channel in CHANNEL_USERNAMES:
        if not media_url:
            await bot.send_message(chat_id=channel, text=final_text)
            continue

        mu = media_url.lower().replace(".webb", ".webp")  # –∞–≤—Ç–æ—Ñ—ñ–∫—Å –æ–ø–∏—Å–∫–∏

        if mu.startswith(("baac", "bqac", "caac")):
            await bot.send_video(chat_id=channel, video=mu, caption=final_text)
        elif mu.endswith((".jpg", ".jpeg", ".png", ".webp")):
            await bot.send_photo(chat_id=channel, photo=mu, caption=final_text)
        elif mu.endswith((".mp4", ".mov", ".mkv", ".webm")):
            await bot.send_video(chat_id=channel, video=mu, caption=final_text)
        else:
            await bot.send_message(chat_id=channel, text=final_text)


async def run_once():
    """–û–¥–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è: –∑–Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∏ –Ω–∞ —á–∞—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ó—Ö, –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å."""
    try:
        sheet = get_sheet()

        # —à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        try:
            a1 = sheet.acell("A1").value
            logging.warning("CHECK A1: %r", a1)
        except Exception:
            logging.exception("–ù–µ –º–æ–∂—É –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ A1 ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä SHEET_ID —ñ –¥–æ—Å—Ç—É–ø (Share: Editor –Ω–∞ client_email)")
            return

        headers = sheet.row_values(1)
        logging.warning("HEADERS row1: %s", headers)

        # –±–µ–∑ expected_headers ‚Äî —Å—É–º—ñ—Å–Ω–æ –∑ gspread 6.x
        rows = sheet.get_all_records()  # head=1 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

        tz = pytz.timezone(TIMEZONE)
        now = datetime.now(tz)

        def getv(row, key):
            return (row.get(key) or row.get(key.strip()) or "").strip()

        for idx, row in enumerate(rows, start=2):  # 2 ‚Äî –±–æ 1-–π —Ä—è–¥–æ–∫ —Ü–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            status    = getv(row, "–°—Ç–∞—Ç—É—Å")
            dt_str    = getv(row, "–î–∞—Ç–∞ —ñ —á–∞—Å")
            text      = getv(row, "–¢–µ–∫—Å—Ç")
            media_url = getv(row, "–ü—Ä—è–º–∏–π –ª—ñ–Ω–∫")

            if status or not dt_str or not text:
                continue

            # –ø–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É —É –∫—ñ–ª—å–∫–æ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            dt = None
            for fmt in ("%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M", "%Y/%m/%d %H:%M"):
                try:
                    naive = datetime.strptime(dt_str, fmt)
                    dt = tz.localize(naive)
                    break
                except ValueError:
                    continue

            if dt is None:
                logging.warning("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ —É —Ä—è–¥–∫—É %d: %r", idx, dt_str)
                continue

            # ‚úÖ –í–ê–ñ–õ–ò–í–û: —Ü–µ–π –±–ª–æ–∫ –ú–ê–Ñ –±—É—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü–∏–∫–ª—É for (–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º)
            if dt <= now:
                footer = random.choice(FOOTERS)
                final_text = f"{text}\n\n{footer}"
                try:
                    # 1) —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–∑–Ω–∞—á–∫–∞, —â–æ–± –Ω–µ –∑–∞–¥—É–±–ª—é–≤–∞—Ç–∏ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ
                    sheet.update_cell(idx, 5, "‚è≥")  # –∫–æ–ª.5 = "–°—Ç–∞—Ç—É—Å"

                    # 2) –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
                    await send_to_channels(final_text, media_url)

                    # 3) —Ñ—ñ–∫—Å—É—î–º–æ —É—Å–ø—ñ—Ö
                    sheet.update_cell(idx, 5, "‚úÖ")
                    logging.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä—è–¥–æ–∫ %d", idx)

                except Exception:
                    # 4) —è–∫—â–æ –∑–±—ñ–π ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ
                    logging.exception("–ó–±—ñ–π –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä—è–¥–∫–∞ %d", idx)
                    sheet.update_cell(idx, 5, "")
                    continue

    except Exception:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –≤ run_once")

async def close_bot():
    try:
        await bot.session.close()
    except Exception:
        logging.exception("Bot close failed")
