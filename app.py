import os
import asyncio
import logging
from fastapi import FastAPI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from fastapi.responses import PlainTextResponse
from fastapi import Request

import poster  # —Ü–µ —Ç–≤—ñ–π —Ñ–∞–π–ª –≤–∏—â–µ, –¥–µ —î run_once()

app = FastAPI()
scheduler = AsyncIOScheduler()

@app.api_route("/", methods=["GET", "HEAD"])
async def root(request: Request):
    # Render —à–ª–µ HEAD / ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ 200 –±–µ–∑ —Ç—ñ–ª–∞
    if request.method == "HEAD":
        return PlainTextResponse("", status_code=200)
    # GET /
    return {"ok": True, "ping": "/ping"}



@app.get("/ping")
async def ping():
    return {"status": "ok"}


# (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) –ö–Ω–æ–ø–∫–∞ ‚Äú–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑‚Äù –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@app.api_route("/run-now", methods=["GET", "POST"])
async def run_now():
    asyncio.create_task(poster.run_once())
    return {"started": True}


@app.on_event("startup")
async def on_startup():
    logging.info("Starting scheduler...")
    # üîÅ –ó–ê–ü–õ–ê–ù–£–ô: —Ä–∞–∑ –Ω–∞ N —Ö–≤–∏–ª–∏–Ω (–ø—ñ–¥–±–µ—Ä–∏ —Å–≤—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª)
    scheduler.add_job(poster.run_once, "interval", minutes=3, id="poster_job", max_instances=1, coalesce=True)
    scheduler.start()

    # ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –æ–¥–∏–Ω —Ä–∞–∑ —É —Ñ–æ–Ω—ñ (–Ω–µ –±–ª–æ–∫—É—î —Å—Ç–∞—Ä—Ç)
    asyncio.create_task(poster.run_once())

@app.on_event("shutdown")
async def on_shutdown():
    logging.info("Shutting down scheduler...")
    try:
        scheduler.shutdown()
    except Exception:
        logging.exception("Scheduler shutdown failed")
    # –∞–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏ aiogram Bot
    await poster.close_bot()
